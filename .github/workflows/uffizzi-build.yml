name: Preview (build)
on:
  pull_request:
    types: [opened, synchronize, reopened, closed]
jobs:
  build-search:
    name: Build PR Amundsend Search image
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'pull_request' || github.event.action != 'closed' }}
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout git repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Generate UUID image name
        id: uuid
        run: echo "UUID_TAG_SEARCH=$(uuidgen)" >> $GITHUB_ENV
      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: registry.uffizzi.com/${{ env.UUID_TAG_SEARCH }}
          tags: type=raw,value=60d
      - name: Build and Push Image to registry.uffizzi.com ephemeral registry
        uses: docker/build-push-action@v2
        with:
          push: true
          context: .
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          file: ./Dockerfile.search.public
          cache-from: type=gha
          cache-to: type=gha,mode=max
  build-metadata:
    name: Build PR Amundsend Metadata image
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'pull_request' || github.event.action != 'closed' }}
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout git repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Generate UUID image name
        id: uuid
        run: echo "UUID_TAG_METADATA=$(uuidgen)" >> $GITHUB_ENV
      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: registry.uffizzi.com/${{ env.UUID_TAG_METADATA }}
          tags: type=raw,value=60d
      - name: Build and Push Image to registry.uffizzi.com ephemeral registry
        uses: docker/build-push-action@v2
        with:
          push: true
          context: .
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          file: ./Dockerfile.metadata.public
          cache-from: type=gha
          cache-to: type=gha,mode=max
  build-databuilder:
    name: Build PR Amundsend Databuilder image
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'pull_request' || github.event.action != 'closed' }}
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout git repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Generate UUID image name
        id: uuid
        run: echo "UUID_TAG_DATABUILDER=$(uuidgen)" >> $GITHUB_ENV
      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: registry.uffizzi.com/${{ env.UUID_TAG_DATABUILDER }}
          tags: type=raw,value=60d
      - name: Build and Push Image to registry.uffizzi.com ephemeral registry
        uses: docker/build-push-action@v2
        with:
          push: true
          context: .
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          file: ./Dockerfile.databuilder-init.public
          cache-from: type=gha
          cache-to: type=gha,mode=max
  build-frontend:
    name: Build PR Amundsend Frontend image
    runs-on: ubuntu-latest
    if: ${{ github.event_name != 'pull_request' || github.event.action != 'closed' }}
    outputs:
      tags: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout git repo
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Generate UUID image name
        id: uuid
        run: echo "UUID_TAG_FRONTEND=$(uuidgen)" >> $GITHUB_ENV
      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: registry.uffizzi.com/${{ env.UUID_TAG_FRONTEND }}
          tags: type=raw,value=60d
      - name: Build and Push Image to registry.uffizzi.com ephemeral registry
        uses: docker/build-push-action@v2
        with:
          push: true
          context: .
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          file: ./Dockerfile.frontend.local
          cache-from: type=gha
          cache-to: type=gha,mode=max
          args: |
            SEARCHSERVICE_BASE: http://localhost:5001
            METADATASERVICE_BASE: http://localhost:5002
  render-compose-file:
    name: Render Docker Compose file
    # Pass output of this workflow to another triggered by `workflow_run` event.
    runs-on: ubuntu-latest
    needs:
      - build-metadata
      - build-search
      - build-frontend
      - build-databuilder
    steps:
      - name: Checkout git repo
        uses: actions/checkout@v3
      - name: Render Compose File
        run: |
          export AMUNDSEN_SEARCH_IMAGE=${{ needs.build-search.outputs.tags }}
          export AMUNDSEN_METADATA_IMAGE=${{ needs.build-metadata.outputs.tags }}
          export AMUNDSEN_FRONTEND_IMAGE=${{ needs.build-frontend.outputs.tags }}
          export AMUNDSEN_DATABUILDER_IMAGE=${{ needs.build-databuilder.outputs.tags }}
          # Render simple template from environment variables.
          envsubst < ./docker-compose.uffizzi.yml > docker-compose.rendered.yml
          cat docker-compose.rendered.yml
      - name: Upload Rendered Compose File as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: preview-spec
          path: docker-compose.rendered.yml
          retention-days: 2
      - name: Serialize PR Event to File
        run: |
          cat << EOF > event.json
          ${{ toJSON(github.event) }}
          EOF
      - name: Upload PR Event as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: preview-spec
          path: event.json
          retention-days: 2

  delete-preview:
    name: Mark preview for deletion
    runs-on: ubuntu-latest
    if: ${{ github.event.action == 'closed' }}
    steps:
      # If this PR is closing, we will not render a compose file nor pass it to the next workflow.
      - name: Serialize PR Event to File
        run: echo '${{ toJSON(github.event) }}' > event.json
      - name: Upload PR Event as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: preview-spec
          path: event.json
          retention-days: 2